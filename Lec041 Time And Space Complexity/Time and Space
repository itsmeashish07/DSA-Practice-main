Recursion
The process in which a function calls itself directly or indirectly is known as recursion, and the function which calls itself is known as a recursive function. You can learn more about recursion here. In function, there must be a base condition to terminate the recursive call of the function.

Pseudo Code of Recursion
Let's write the pseudo code to find the Nth Fibonacci number using recursion to know how recursion works.

int Fibonacci(int n){
    
    /*Base Condition*/
    if(n==1 or n==0) return 1;
    
    /*Recursive Call*/
    return Fibonacci(n-1) + Fibonacci(n-2);
}
Explanation
For any integer ‘N’, the function calls itself two times i.e, for ‘N-1’ and ‘N-2’. In this way, the recursive call expands until (like a tree) the value of ‘N’ is greater than 1, which is also the base condition to terminate the recursive call. Below is the recursive tree for N = 4.

The time complexity of recursion
The time complexity of recursion depends on the number of times the function calls itself. If a function calls itself two times then its time complexity is O(2 ^ N). if it calls three times then its time complexity is O(3 ^ N) and so on.

Backtracking
Backtracking is a technique used to solve the problems in which we need to build all the possible solutions and remove those solutions that fail to satisfy the problem's constraints at any point in time. You can learn more about backtracking here.

Application of Backtracking
The following types of problems can be solved using backtracking

All those problems where we need to find a feasible solution.
Optimization problems.
Problems in which we need to find all the possible solutions.
The time complexity of Backtracking
The time complexity of backtracking depends on the number of times the function calls itself.

For example, if the function calls itself two times, then its time complexity is O(2 ^ N), and if it calls three times, then O(3 ^ N) and so on. Hence the time complexity of backtracking can be defined as O(K ^ N), where ‘K’ is the number of times the function calls itself.